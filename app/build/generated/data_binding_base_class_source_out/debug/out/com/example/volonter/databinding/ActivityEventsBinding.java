// Generated by view binder compiler. Do not edit!
package com.example.volonter.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.Button;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.volonter.R;
import com.google.android.material.bottomnavigation.BottomNavigationView;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ActivityEventsBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final BottomNavigationView bottomNavigationView;

  @NonNull
  public final TextView eventsApp;

  @NonNull
  public final Button eventsButton1;

  @NonNull
  public final ConstraintLayout eventsElement;

  @NonNull
  public final FrameLayout frameLayout;

  @NonNull
  public final LinearLayout linearLayout;

  @NonNull
  public final RecyclerView recyclerEvents;

  @NonNull
  public final RelativeLayout relativeLayout;

  private ActivityEventsBinding(@NonNull ConstraintLayout rootView,
      @NonNull BottomNavigationView bottomNavigationView, @NonNull TextView eventsApp,
      @NonNull Button eventsButton1, @NonNull ConstraintLayout eventsElement,
      @NonNull FrameLayout frameLayout, @NonNull LinearLayout linearLayout,
      @NonNull RecyclerView recyclerEvents, @NonNull RelativeLayout relativeLayout) {
    this.rootView = rootView;
    this.bottomNavigationView = bottomNavigationView;
    this.eventsApp = eventsApp;
    this.eventsButton1 = eventsButton1;
    this.eventsElement = eventsElement;
    this.frameLayout = frameLayout;
    this.linearLayout = linearLayout;
    this.recyclerEvents = recyclerEvents;
    this.relativeLayout = relativeLayout;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ActivityEventsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ActivityEventsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.activity_events, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ActivityEventsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.bottomNavigationView;
      BottomNavigationView bottomNavigationView = ViewBindings.findChildViewById(rootView, id);
      if (bottomNavigationView == null) {
        break missingId;
      }

      id = R.id.events_app;
      TextView eventsApp = ViewBindings.findChildViewById(rootView, id);
      if (eventsApp == null) {
        break missingId;
      }

      id = R.id.events_button1;
      Button eventsButton1 = ViewBindings.findChildViewById(rootView, id);
      if (eventsButton1 == null) {
        break missingId;
      }

      ConstraintLayout eventsElement = (ConstraintLayout) rootView;

      id = R.id.frameLayout;
      FrameLayout frameLayout = ViewBindings.findChildViewById(rootView, id);
      if (frameLayout == null) {
        break missingId;
      }

      id = R.id.linearLayout;
      LinearLayout linearLayout = ViewBindings.findChildViewById(rootView, id);
      if (linearLayout == null) {
        break missingId;
      }

      id = R.id.recycler_events;
      RecyclerView recyclerEvents = ViewBindings.findChildViewById(rootView, id);
      if (recyclerEvents == null) {
        break missingId;
      }

      id = R.id.relativeLayout;
      RelativeLayout relativeLayout = ViewBindings.findChildViewById(rootView, id);
      if (relativeLayout == null) {
        break missingId;
      }

      return new ActivityEventsBinding((ConstraintLayout) rootView, bottomNavigationView, eventsApp,
          eventsButton1, eventsElement, frameLayout, linearLayout, recyclerEvents, relativeLayout);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
